<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[#Code #Cook #Travel]]></title>
  <link href="http://csiebler.github.io/atom.xml" rel="self"/>
  <link href="http://csiebler.github.io/"/>
  <updated>2014-02-09T21:45:52+01:00</updated>
  <id>http://csiebler.github.io/</id>
  <author>
    <name><![CDATA[Clemens Siebler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multi-project Code Coverage Using Gradle and Jacoco]]></title>
    <link href="http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco/"/>
    <updated>2014-02-09T18:38:31+01:00</updated>
    <id>http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco</id>
    <content type="html"><![CDATA[<p>After playing around with a couple of different Cobertura plugins for Gradle, I realized that using the built-in Jacoco plugin is much easier to set up in a project consisting of multiple subprojects. Here is a quick solution for generating a holistic code coverage report in Gradle.</p>

<p>Summary:</p>

<ul>
<li>The root-level project doesn&rsquo;t contain any code, it just controls the overall build process</li>
<li>The Jacoco plugin is applied to all subprojects &ndash; the jacoco task will instrument the classes and capture the execution data in <code>&lt;path_to_subproject&gt;/build/jacoco/*.exec</code></li>
<li>The root-level <code>build.gradle</code> uses the <code>JacocoReport</code> task to generate the holistic coverage report</li>
</ul>


<figure class='code'><figcaption><span>build.gradle (root-level project)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">allprojects</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jacoco&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">codeCoverageReport</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JacocoReport</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Gather execution data from all subprojects</span>
</span><span class='line'>    <span class="c1">// (change this if you e.g. want to calculate unit test/integration test coverage separately)</span>
</span><span class='line'>    <span class="n">executionData</span> <span class="nf">fileTree</span><span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="na">rootDir</span><span class="o">.</span><span class="na">absolutePath</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s2">&quot;**/build/jacoco/*.exec&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add all relevant sourcesets from the subprojects </span>
</span><span class='line'>    <span class="n">subprojects</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">sourceSets</span> <span class="n">it</span><span class="o">.</span><span class="na">sourceSets</span><span class="o">.</span><span class="na">main</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">reports</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">xml</span><span class="o">.</span><span class="na">enabled</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">html</span><span class="o">.</span><span class="na">enabled</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">html</span><span class="o">.</span><span class="na">destination</span> <span class="s2">&quot;${buildDir}/reports/jacoco&quot;</span>
</span><span class='line'>      <span class="n">csv</span><span class="o">.</span><span class="na">enabled</span> <span class="kc">false</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// always run the tests before generating the report</span>
</span><span class='line'><span class="n">codeCoverageReport</span><span class="o">.</span><span class="na">dependsOn</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">subprojects</span><span class="o">*.</span><span class="na">test</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
