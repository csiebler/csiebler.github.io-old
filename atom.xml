<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[#Code #Cook #Travel]]></title>
  <link href="http://csiebler.github.io/atom.xml" rel="self"/>
  <link href="http://csiebler.github.io/"/>
  <updated>2014-03-01T21:49:51+01:00</updated>
  <id>http://csiebler.github.io/</id>
  <author>
    <name><![CDATA[Clemens Siebler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle/JMockit/Code Coverage Troubles]]></title>
    <link href="http://csiebler.github.io/blog/2014/03/01/gradle-jmockit-code-coverage-troubles/"/>
    <updated>2014-03-01T16:37:01+01:00</updated>
    <id>http://csiebler.github.io/blog/2014/03/01/gradle-jmockit-code-coverage-troubles</id>
    <content type="html"><![CDATA[<p>For the past week, I&rsquo;ve been <del>playing</del> messing around with generating a decent test coverage report through Gradle. The project I am currently working on contains many older unit tests which use jMock. However, most of the newer ones use JMockit. JMockit seems to be a little tricky to integrate with most of the popular code coverage tools out there. Here are my experiences for using jMock and JMockit with EMMA, Cobertura, and JaCoCo.</p>

<h1>EMMA</h1>

<p>I always liked EMMA. Sure, it is pretty old and not actively developed any more, but it still does its job. The generated reports look nice, it is fast, and the Jenkins plugin also generates decent graphs. The <a href="https://github.com/breskeby/gradleplugins/tree/master/emmaPlugin">EMMA Plugin</a> for Gradle enables easy integration with Gradle. I&rsquo;ve never had any issues when using it in combination with jMock. However, EMMA doesn&rsquo;t seem to get along well with JMockit. I&rsquo;ve been getting <code>ClassFormatErrors</code> left and right when using <code>@BeforeClass</code> and <code>@AfterClass</code> in my unit tests. Mocking methods in static classes via <code>new MockUp&lt;T&gt;</code> also didn&rsquo;t work properly. Others have experienced the same issues (see <a href="https://code.google.com/p/jmockit/issues/detail?id=239">1</a>, <a href="http://stackoverflow.com/questions/905052/classformaterror-using-jmockit-with-emma">2</a>) . After trying out multiple versions of EMMA and JMockit, I gave up. Needless to say, when skipping the <code>emma</code> task in Gradle, all tests pass.</p>

<h1>Cobertura</h1>

<p>I&rsquo;ve also never had any issues with Cobertura and jMock. The <a href="https://github.com/stevesaliman/gradle-cobertura-plugin">Cobertura plugin</a> for Gradle is easy to set up and I think the generated reports are by far the nicest (in terms of readability). I especially like those generated by the Jenkins plugin. However, using Cobertura with JMockit also poses some issues: While it was not throwing any exceptions, several tests just kept hanging and never finished. Until today, I haven&rsquo;t figured out why.</p>

<h1>JaCoCo</h1>

<p>JaCoCo was developed as a replacement for EMMA &ndash; however, I am not sure if JaCoCo is based on the EMMA code. Gradle allows to generate code coverage reports through its built-in <a href="http://www.gradle.org/docs/current/userguide/jacoco_plugin.html">Jacoco plugin</a>. The <a href="https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin">Jacoco plugin</a> for Jenkins offers an easy way to integrate a test coverage report in Jenkins. I don&rsquo;t like the reports too much as I think that they are a little bit difficult to read &ndash; especially when trying to figure out which package needs more attention. Everything works smooth with jMock, but guess what? For the my given unit tests, it didn&rsquo;t play well with JMockit either. Unlike EMMA, no JVM errors are thrown, but some tests kept hanging forever. Luckily, there is a fairly simple workaround (also suggested <a href="https://groups.google.com/forum/#!topic/jmockit-users/X9RpdAu45Ek">here</a>):</p>

<p>Instead of including JMockit throught the classpath (e.g., through <code>testCompile 'com.googlecode.jmockit:jmockit:1.5'</code>), it seems to work when being included through the <code>-javaagent</code> JVM flag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test {
</span><span class='line'>  jvmArgs "-javaagent:${project.rootDir.absolutePath}/path/to/jmockit.jar"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In order to be able to run the tests through Eclipse, I added the <code>jmockit.jar</code> to the classpath in the <code>eclipse</code> task. As I don&rsquo;t generate code coverage in Eclipse (i.e., JaCoCo is only ran through Gradle), this doesn&rsquo;t pose any issues.</p>

<h1>JMockit coverage</h1>

<p>The easiest solution seems to use the <a href="http://jmockit.googlecode.com/svn/trunk/www/tutorial/CodeCoverage.html">JMockit Coverage</a> library. Just throw JMockit and JMockit Coverage into your classpath and everything works fine:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>testCompile 'com.googlecode.jmockit:jmockit:1.5'
</span><span class='line'>testCompile 'com.googlecode.jmockit:jmockit-coverage:0.999.24'</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it &ndash; All tests pass, not a single issue! It will automatically generate a report in the base directory from where the tests are ran (per default this is where your <code>build.gradle</code> sits). The configuration is pretty straight forward and fairly flexible. Unfortunatly, there are two things I really disliked about JMockit Coverage:</p>

<ul>
<li>The reports look very cluttered and are difficult to read</li>
<li>There is no Jenkins plugin (<a href="https://groups.google.com/forum/#!topic/jmockit-users/LFAODclLNDs">it seems like</a>  I am not the only one who would like to see one)</li>
</ul>


<h1>Final thoughts</h1>

<p>If you can live without a Jenkins plugin, use JMockit plus its own coverage tool. As having no Jenkins integration is a deal breaker for me, I&rsquo;m going to stick with the JaCoCo workaround for now. It may also be worth investigating the effects of online/offline instrumentation, but well, one thing at a time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-project Code Coverage Using Gradle and JaCoCo]]></title>
    <link href="http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco/"/>
    <updated>2014-02-09T18:38:31+01:00</updated>
    <id>http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco</id>
    <content type="html"><![CDATA[<p>After playing around with a couple of different Cobertura plugins for Gradle, I realized that using the built-in JaCoCo plugin is much easier to set up in a project consisting of multiple subprojects. Here is a quick solution for generating a holistic code coverage report in Gradle.</p>

<p>Summary:</p>

<ul>
<li>The root-level project doesn&rsquo;t contain any code, it just controls the overall build process</li>
<li>The Jacoco plugin is applied to all subprojects &ndash; the <code>jacoco</code> task will instrument the classes and capture the execution data in <code>&lt;path_to_subproject&gt;/build/jacoco/*.exec</code></li>
<li>The root-level <code>build.gradle</code> uses the <code>JacocoReport</code> task to generate the holistic coverage report</li>
</ul>


<figure class='code'><figcaption><span>build.gradle (root-level project)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">allprojects</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;jacoco&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="nf">codeCoverageReport</span><span class="o">(</span><span class="nl">type:</span> <span class="n">JacocoReport</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Gather execution data from all subprojects</span>
</span><span class='line'>    <span class="c1">// (change this if you e.g. want to calculate unit test/integration test coverage separately)</span>
</span><span class='line'>    <span class="n">executionData</span> <span class="nf">fileTree</span><span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="na">rootDir</span><span class="o">.</span><span class="na">absolutePath</span><span class="o">).</span><span class="na">include</span><span class="o">(</span><span class="s2">&quot;**/build/jacoco/*.exec&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Add all relevant sourcesets from the subprojects </span>
</span><span class='line'>    <span class="n">subprojects</span><span class="o">.</span><span class="na">each</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">sourceSets</span> <span class="n">it</span><span class="o">.</span><span class="na">sourceSets</span><span class="o">.</span><span class="na">main</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">reports</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">xml</span><span class="o">.</span><span class="na">enabled</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">html</span><span class="o">.</span><span class="na">enabled</span> <span class="kc">true</span>
</span><span class='line'>      <span class="n">html</span><span class="o">.</span><span class="na">destination</span> <span class="s2">&quot;${buildDir}/reports/jacoco&quot;</span>
</span><span class='line'>      <span class="n">csv</span><span class="o">.</span><span class="na">enabled</span> <span class="kc">false</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// always run the tests before generating the report</span>
</span><span class='line'><span class="n">codeCoverageReport</span><span class="o">.</span><span class="na">dependsOn</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">subprojects</span><span class="o">*.</span><span class="na">test</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
